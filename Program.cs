using System.ComponentModel.DataAnnotations;
using System.Security.Cryptography;
using System.Text;
using KomunikacePomociModernichSifer;

/*cRSA rsa = new cRSA();
byte[] publicKey = rsa.PublicKey;
byte[] privateKey = rsa.PrivateKey;
cRSA.printByte(publicKey);
cRSA.printByte(privateKey);*/

byte[] nemujPublicKey = cRSA.HexStringToByteArray("3082010A0282010100DDBEBE9E312324F3E153EBA77E14B9E94F277055F787890093A70B01B81941FEABE35CDDA4A09E5114CF4112DA7253850A45AA61A88D4BAB3FC2CD68355C8CB19D2380E6C46E0699E4157063FBB753F63156FD6257BCF32E64BC10F9FF33CD4854EC5510EA06CB5250643A6B379658D4F663C23E5E5F408473C0BAB4FB9B41EF96B9B5D8EB567A563E777496B93D857DF52C1109E8B3B5112EED68D846997F638343B516F0BD1C6EA0C63FB78274DD30FA8143F07B0E9DD96FE37E9FF03CD50F4C05F8618D58FC1F2CF821F1864A61417679AF111CA8C4F0C692FC2E7BD996E99A8A8A840768035551FBD35857168ADED390DFA2C0A1B5C344BCC46EB1F120390203010001");
byte[] savedPrivateKey = cRSA.HexStringToByteArray
byte[] encryptedAESKey = cRSA.Encrypt(nemujPublicKey, "E1DA566C0683CDE70DD0D133F752E7F4B3822B7C70F325B091D174D792B2690D");
byte[] encryptedAESIV = cRSA.Encrypt(nemujPublicKey, "61E41F34C4DF5199D8B973869A9C725E");
//cRSA.printByte(encryptedAESKey);
//cRSA.printByte(encryptedAESIV);

byte[] savedEncryptedAESKey = cRSA.HexStringToByteArray
byte[] savedEncryptedIVKey = cRSA.HexStringToByteArray("46E2CC0FFBD49C0E0D568DCB46153DDADB74C3058581E2DF2AF89F01F2F5502E45387BC7F577C317CBCA17F24CC78E6344643F125AD49A64F2F81D306B56BB5B5AFAF8FFBBCAE2095B89A3412E29F0C8FE2B64DCAE111A4FF65859B7F98F62E757CF9FBB53706E82EE94F4220E62C645791DF44756B99425B331CC57FDA6C089A3C12CB31FB8CFD26881CCAE55E8E89C165A1D5FBF90C22A57FE59316C8B31BAF77656B72E40352B9FCF13063DA80E722337FE78C3B1B84C92B24D086CB5B87FBF2C79C5381CAFD6560668B060D8C43D027B85740BFB50F139CA37DB0DA27B2219F20D2C1CE3426B0DF1D08D34B201EFD84F4F2DDEA1E445282334BB658375FC");
string savedDecryptedAESKey = cRSA.Decrypt(savedPrivateKey, savedEncryptedAESKey);
string savedDecryptedIVKey = cRSA.Decrypt(savedPrivateKey, savedEncryptedIVKey);
//Console.WriteLine(savedDecryptedAESKey);
//Console.WriteLine(savedDecryptedIVKey);

//Adam
//cAES aes = new cAES();
string message = "Ahoj svete!";
byte[] savedKey = cAES.HexStringToByteArray("E1DA566C0683CDE70DD0D133F752E7F4B3822B7C70F325B091D174D792B2690D");
byte[] savedIv = cAES.HexStringToByteArray("61E41F34C4DF5199D8B973869A9C725E");
byte[] encryptedMessage = cAES.Encrypt(savedKey, savedIv, message);
//cAES.printByte(encryptedMessage);

//Radek
//cAES cAES = new cAES();
byte[] encryptedMessage2 = cAES.HexStringToByteArray("C71CAB52F54FAA98F8C73BAE83DDC464");
byte[] savedKey2 = cAES.HexStringToByteArray("E1DA566C0683CDE70DD0D133F752E7F4B3822B7C70F325B091D174D792B2690D");
byte[] savedIv2 = cAES.HexStringToByteArray("61E41F34C4DF5199D8B973869A9C725E");
string decryptedMessage2 = cAES.Decrypt(savedKey2, savedIv2, encryptedMessage2);

//Console.WriteLine(decryptedMessage2);


/*byte[] key = cAES.Key;
byte[] iv = cAES.Iv;a

foreach (var c in key)
{
    Console.Write(String.Format("{0:X2}", c));
}
Console.WriteLine();
foreach (var c in iv)
{
    Console.Write(String.Format("{0:X2}", c));
}*/

/*foreach (var c in encryptedMessage)
{
    Console.Write(string.Format("{0:X2}", c));
}
Console.WriteLine();*/

//byte[] encryptedMessage = cAES.HexStringToByteArray("3AE769CECEC476C6A9A1BAAB61F210D2");
/*foreach (var c in encryptedMessage)
{
    Console.Write(string.Format("{0:X2}", c));
}*/

/*byte[] received;
using (Aes aesAlg = Aes.Create())
{
    aesAlg.Key = savedKey;
    aesAlg.IV = savedIv;
    ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
    using (MemoryStream msDecrypt = new MemoryStream(encryptedMessage))
    {
        using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
        {
            using (BinaryReader srDecrypt = new BinaryReader(csDecrypt))
            {
                received = srDecrypt.ReadBytes((int)msDecrypt.Length);
            }
        }
    }
}

foreach (var x in received)
{
    Console.Write(String.Format("{0:x2} ", x));
}*/

message = "Ahoj, svete";
//string dostanuHash = "DAB21B8DF1C1C85B57DB5F7083D6711B62CC9FE06250FB3BC0C4D3AB4C124868";
string hash = SHA.GenerateHash(message);
//SHA.PrintMessage(message);

//Console.WriteLine(SHA.VerifyHash(message, dostanuHash));

byte[] encryptedUsingPrivateKey = cRSA.Sign(hash, savedPrivateKey);
//cRSA.printByte(encryptedUsingPrivateKey);



string dostanuMesage = message = "Ahoj, svete";
string dostanuZpravuHash = SHA.GenerateHash(dostanuMesage);
string dostanuEncryptedUsingPrivateKey = "897681AB7E8A18EA9017E7BB35036524FCAFEEE1CE8F520B8332215DFB100E518A85507DD95662C10E14BDF13AFBD48827AC81C4631C5C408B6FFCD41A9D4094FA3ED9130C246E225CB79743EE32ACFCC80EDB39A02355F99867DE52026F2B54A31EDB773D0B76635053875F2F8397D258FE76D1594843A08868B0F0AEED9A7D822A0192350A95F0BC9C2CC0747EF6E62921DB9FD46841786451BE31DDDB01725DF66E58B3D4C5752B365BEC1C7A8A89423475354592FCED7685D2E03F0D0AD7614A82E2EAACA0DACAD088BDD283CDAE6E8F76D801DE4E7252BB13E422609A1E22227EF063AECF148D695DE512490B847A39DCFEDFF338AD1AC3D5026B48A7C2";
string dostanuNemujPublicKey = "3082010A0282010100AF3CE72EE70D0AE19E67B4BA9657A8EFB30D14632029A6594968D3F10E2841A255EAE4CB6B00F77B9AE51D9E8D60524B2C81B903E4D67317CB75CF85CC3E8D8E23AFE7513368E131324812E8EB132327C55CBC9D85B16AF198B2AF605640D3A8B84A21E8D99752A969A236A1A9124D900AD5647DF524A97D2AC105B5CB319491F1A59E927C06CBF209C91CFD800EAA5782817D6563F0AB057440EE4A0A0A2412F0CEFFE22A8CB6D5175C6494E6EB2CE5F24819B27221B59E38BA96F5ADE3611FF2111F8C7B2373ADCC4D38E4DE26DB0E194346515FE589653FD8D52A87B74EC2B4C07443EC8FEBCCDA4A4A3B069D1A17B2869F047FB0A9D6433E402D6000CBF90203010001";

bool messageIsTheSame = cRSA.VerifySignature(dostanuZpravuHash, cRSA.HexStringToByteArray(dostanuEncryptedUsingPrivateKey), dostanuNemujPublicKey);

Console.WriteLine(messageIsTheSame);